# Introduction

1.Python If-Else

def weird(n):
    if n%2==1 or 6 <= n <= 20:
        print('Weird')
    else:
        print('Not weird')
weird(int(input()))


2.Arithmetic Operators

if __name__ == '__main__':
    a = int(input())
    b = int(input())
# We use if __name__ == “__main__” block to prevent (certain) code from being run when the module is imported. when run directly in this module, __main__ is set to __name__, otherwise (import in another module instead of run directly in current module) set the file/module name to __name__

def task(a,b):
    print(a+b)
    print(a-b)
    print(a*b)

task(a,b)

3.Python: Division

if __name__ == '__main__':
    a = int(input())
    b = int(input())

def task(a,b):
    print(a//b)
    print(a/b)

task(a,b)

4. Loops

if __name__ == '__main__':
    n = int(input())

def squre(n):
    for i in range(n):
        print(i*i)

squre(n)


5. Write a function

def is_leap(year):
    leap = False
    
    # Write your logic here
    if(year%4==0 and (year %100 !=0 or year%400 ==0)):
        leap = True
   
    return leap

year = int(input())
print(is_leap(year))


6. Print Function

if __name__ == '__main__':
    n = int(input())

def prints(n):
    for i in range(1, n+1):
        print(i, end='')

prints(n)



# Basic Data Types

1.List Comprehensions

if __name__ == '__main__':
    x = int(input())
    y = int(input())
    z = int(input())
    n = int(input())

listanswer = [[i,j,k] for i in range(x+1) for j in range(y+1) for k in range(z+1) if i+j+k!=n]
print(listanswer)



2. Find the Runner-Up Score!

if __name__ == '__main__':
    n = int(input())
    arr = map(int, input().split())

print(sorted(list(set(arr))))

or 

if __name__ == '__main__':
    n = int(input())
    arr = map(int, input().split())
arr2 = sorted(arr,reverse=True)
for i in range(len(arr2)):
    if(arr2[i]!=max(arr2)):
        print(arr2[i])
        break
        
 3. Nested Lists
 
 if __name__ == '__main__':
    classList = []
    n = int(input())
    for _ in range(n):
        name = input()
        score = float(input())
        classList.append([name, score])


def secondLowestGrade(classList):
    secondLowestScore = sorted(set(c[1] for c in classList))[1]
    result = sorted([c[0] for c in classList if c[1] == secondLowestScore])
    return result


print('\n'.join(secondLowestGrade(classList)))



4. Finding the percentage

if __name__ == '__main__':
    n = int(input())
    student_marks = {}
    for _ in range(n):
        name, *line = input().split()   # * collects all the positional arguments in a tuple; ** collects all the keyword arguments in a dictionary.
        scores = list(map(float, line))
        student_marks[name] = scores
    query_name = input()

def avg(student_marks, query_name):
    score = sum(student_marks[query_name]) / 3 
    return score

x = avg(student_marks, query_name)
print('%.2f' % x)


5. Lists


def handle(result):
    inp = input().split()
    command = inp[0]
    values = inp[1:]
    if command=='print':
        print(result)
    else:
        eval('result.'+command+'('+ ",".join(values) +')') 


result = []
n=int(input())
for i in range(n):
    handle(result)
    
    
6. Tuples

if __name__ == '__main__':
    n = int(input())
    integer_list = map(int, input().split())

print(hash(tuple(integer_list)))






# Strings

1. sWAP cASE

def swap_case(s):
    return s.swapcase

if __name__ == '__main__':
    s = input()
    result = swap_case(s)
    print(result)
    
2. String Split and Join

def split_and_join(line):
    # write your code here
    return '-'.join(line.split(' '))

if __name__ == '__main__':
    line = input()
    result = split_and_join(line)
    print(result)
    
    
3. What's Your Name?

def print_full_name(a, b):
    print("Hello" + ' '+a+' '+b+'! You just delved into python.')

if __name__ == '__main__':
    first_name = input()
    last_name = input()
    print_full_name(first_name, last_name)
    
    
    
 4 Mutations
 
 def mutate_string(string, position, character):
    str = string[:position]+character+string[position+1:]
    # another approach
    #str = list(string)
    #str[position] = character
    #str=''.join(str)
    return str

if __name__ == '__main__':
    s = input()
    i, c = input().split()
    s_new = mutate_string(s, int(i), c)
    print(s_new)
    
    
5. Find a string


def count_substring(string, sub_string):
    counts = 0
    for i in range(len(string)):
        if string[i:i+len(sub_string)] == sub_string:
            counts = counts + 1
     
    return counts

if __name__ == '__main__':
    string = input().strip()
    sub_string = input().strip()
    
    count = count_substring(string, sub_string)
    print(count)
    
    
    
    
6. String Validators

s = input()
a,b,c,d,e=False,False,False,False,False
for i in s:
    if i.isalnum():
        a=True
    if i.isalpha():
        b=True
    if i.isdigit():
        c=True
    if i.islower():
        d=True
    if i.isupper():
        e=True
print(a)
print(b)
print(c)
print(d)
print(e)
    
    
    
7 Text Alignment

#Replace all ______ with rjust, ljust or center. 

thickness = int(input()) #This must be an odd number
c = 'H'

#Top Cone
for i in range(thickness):
    print((c*i).rjust(thickness-1)+c+(c*i).ljust(thickness-1))

#Top Pillars
for i in range(thickness+1):
    print((c*thickness).center(thickness*2)+(c*thickness).center(thickness*6))

#Middle Belt
for i in range((thickness+1)//2):
    print((c*thickness*5).center(thickness*6))    

#Bottom Pillars
for i in range(thickness+1):
    print((c*thickness).center(thickness*2)+(c*thickness).center(thickness*6))    

#Bottom Cone
for i in range(thickness):
    print(((c*(thickness-i-1)).rjust(thickness)+c+(c*(thickness-i-1)).ljust(thickness)).rjust(thickness*6))
    
    
8. Text Wrap

import textwrap


def wrap(string, max_width):
    return textwrap.fill(string, max_width)

if __name__ == '__main__':
    string, max_width = input(), int(input())
    result = wrap(string, max_width)
    print(result)
    
    
9 Designer Door Mat

height, length = map(int, input().split())
for i in range(0, height // 2):
    s = '.|.' * (i * 2 + 1)
    print(s.center(length,'-'))
print('WELCOME'.center(length, '-'))
for i in range(height // 2 - 1, -1, -1):
    s = '.|.' * (i * 2 + 1)
    print(s.center(length,'-'))
    
    
    
10. String Formatting

def print_formatted(number):
    width = len("{0:b}".format(number))
    for i in range(1, number + 1):
        for base in 'doXb':
            print("{0:{width}{base}}".format(i, base=base, width=width), end=' ')
        print()

if __name__ == '__main__':
    n = int(input())
    print_formatted(n)
    
    
    
    
11. Alphabet Rangoli

def print_rangoli(size):
    myStr = 'abcdefghijklmnopqrstuvwxyz'[0:size]
    
    for i in range(size-1, -size, -1):
        x = abs(i)
        if x >= 0:
            line = myStr[size:x:-1]+myStr[x:size]
            print ("--"*x+ '-'.join(line)+"--"*x)


if __name__ == '__main__':
    n = int(input())
    print_rangoli(n)
    
    
    
12. Capitalize!

def solve(s):
    return ' '.join(word.capitalize() for word in s.split(' '))
    


if __name__ == '__main__':
    fptr = open(os.environ['OUTPUT_PATH'], 'w')

    s = input()

    result = solve(s)

    fptr.write(result + '\n')

    fptr.close()
    
    
    
    
    
13. The Minion Game


def minion_game(string):
    # your code goes here
    sl = len(string)
    p1, p2 = 0,0

    for i in range(sl):
        if string[i] in 'AEIOU':
            p1 = p1 + sl - i
        else:
            p2 = p2 + sl - i
    if p1>p2:
        print('Kevin', p1)
    elif p1<p2:
        print('Stuart', p2)
    else:
        print('Draw')

#For the word "BANANA", the first vowel 'A' occurs at position 1, len("BANANA") = 6, 
#so there are 6-1 = 5 substrings starting with this letter 'A': ['A', 'AN', 'ANA', 'ANAN', 'ANANA'], 
#you add one extra letter to that specific letter 'A' until you get to the end of the word.
    

if __name__ == '__main__':
    s = input()
    minion_game(s)
    
    
    
    







   
  
