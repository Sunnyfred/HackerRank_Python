# Introduction

1.Python If-Else

def weird(n):
    if n%2==1 or 6 <= n <= 20:
        print('Weird')
    else:
        print('Not weird')
weird(int(input()))


2.Arithmetic Operators

if __name__ == '__main__':
    a = int(input())
    b = int(input())
# We use if __name__ == “__main__” block to prevent (certain) code from being run when the module is imported. when run directly in this module, __main__ is set to __name__, otherwise (import in another module instead of run directly in current module) set the file/module name to __name__

def task(a,b):
    print(a+b)
    print(a-b)
    print(a*b)

task(a,b)

3.Python: Division

if __name__ == '__main__':
    a = int(input())
    b = int(input())

def task(a,b):
    print(a//b)
    print(a/b)

task(a,b)

4. Loops

if __name__ == '__main__':
    n = int(input())

def squre(n):
    for i in range(n):
        print(i*i)

squre(n)


5. Write a function

def is_leap(year):
    leap = False
    
    # Write your logic here
    if(year%4==0 and (year %100 !=0 or year%400 ==0)):
        leap = True
   
    return leap

year = int(input())
print(is_leap(year))


6. Print Function

if __name__ == '__main__':
    n = int(input())

def prints(n):
    for i in range(1, n+1):
        print(i, end='')

prints(n)



# Basic Data Types

1.List Comprehensions

if __name__ == '__main__':
    x = int(input())
    y = int(input())
    z = int(input())
    n = int(input())

listanswer = [[i,j,k] for i in range(x+1) for j in range(y+1) for k in range(z+1) if i+j+k!=n]
print(listanswer)



2. Find the Runner-Up Score!

if __name__ == '__main__':
    n = int(input())
    arr = map(int, input().split())

print(sorted(list(set(arr))))

or 

if __name__ == '__main__':
    n = int(input())
    arr = map(int, input().split())
arr2 = sorted(arr,reverse=True)
for i in range(len(arr2)):
    if(arr2[i]!=max(arr2)):
        print(arr2[i])
        break
        
 3. Nested Lists
 
 if __name__ == '__main__':
    classList = []
    n = int(input())
    for _ in range(n):
        name = input()
        score = float(input())
        classList.append([name, score])


def secondLowestGrade(classList):
    secondLowestScore = sorted(set(c[1] for c in classList))[1]
    result = sorted([c[0] for c in classList if c[1] == secondLowestScore])
    return result


print('\n'.join(secondLowestGrade(classList)))



4. Finding the percentage

if __name__ == '__main__':
    n = int(input())
    student_marks = {}
    for _ in range(n):
        name, *line = input().split()   # * collects all the positional arguments in a tuple; ** collects all the keyword arguments in a dictionary.
        scores = list(map(float, line))
        student_marks[name] = scores
    query_name = input()

def avg(student_marks, query_name):
    score = sum(student_marks[query_name]) / 3 
    return score

x = avg(student_marks, query_name)
print('%.2f' % x)


5. Lists


def handle(result):
    inp = input().split()
    command = inp[0]
    values = inp[1:]
    if command=='print':
        print(result)
    else:
        eval('result.'+command+'('+ ",".join(values) +')') 


result = []
n=int(input())
for i in range(n):
    handle(result)
    
    
6. Tuples

if __name__ == '__main__':
    n = int(input())
    integer_list = map(int, input().split())

print(hash(tuple(integer_list)))






# Strings

1. sWAP cASE

def swap_case(s):
    return s.swapcase

if __name__ == '__main__':
    s = input()
    result = swap_case(s)
    print(result)
    
2. String Split and Join

def split_and_join(line):
    # write your code here
    return '-'.join(line.split(' '))

if __name__ == '__main__':
    line = input()
    result = split_and_join(line)
    print(result)
    
    
3. What's Your Name?

def print_full_name(a, b):
    print("Hello" + ' '+a+' '+b+'! You just delved into python.')

if __name__ == '__main__':
    first_name = input()
    last_name = input()
    print_full_name(first_name, last_name)
    
    
    
 4 Mutations
 
 def mutate_string(string, position, character):
    str = string[:position]+character+string[position+1:]
    # another approach
    #str = list(string)
    #str[position] = character
    #str=''.join(str)
    return str

if __name__ == '__main__':
    s = input()
    i, c = input().split()
    s_new = mutate_string(s, int(i), c)
    print(s_new)
    
    
5. Find a string


def count_substring(string, sub_string):
    counts = 0
    for i in range(len(string)):
        if string[i:i+len(sub_string)] == sub_string:
            counts = counts + 1
     
    return counts

if __name__ == '__main__':
    string = input().strip()
    sub_string = input().strip()
    
    count = count_substring(string, sub_string)
    print(count)
    
    
    
    
6. String Validators

s = input()
a,b,c,d,e=False,False,False,False,False
for i in s:
    if i.isalnum():
        a=True
    if i.isalpha():
        b=True
    if i.isdigit():
        c=True
    if i.islower():
        d=True
    if i.isupper():
        e=True
print(a)
print(b)
print(c)
print(d)
print(e)
    
    
    
7 Text Alignment

#Replace all ______ with rjust, ljust or center. 

thickness = int(input()) #This must be an odd number
c = 'H'

#Top Cone
for i in range(thickness):
    print((c*i).rjust(thickness-1)+c+(c*i).ljust(thickness-1))

#Top Pillars
for i in range(thickness+1):
    print((c*thickness).center(thickness*2)+(c*thickness).center(thickness*6))

#Middle Belt
for i in range((thickness+1)//2):
    print((c*thickness*5).center(thickness*6))    

#Bottom Pillars
for i in range(thickness+1):
    print((c*thickness).center(thickness*2)+(c*thickness).center(thickness*6))    

#Bottom Cone
for i in range(thickness):
    print(((c*(thickness-i-1)).rjust(thickness)+c+(c*(thickness-i-1)).ljust(thickness)).rjust(thickness*6))
    
    
8. Text Wrap

import textwrap


def wrap(string, max_width):
    return textwrap.fill(string, max_width)

if __name__ == '__main__':
    string, max_width = input(), int(input())
    result = wrap(string, max_width)
    print(result)
    
    
9 Designer Door Mat

height, length = map(int, input().split())
for i in range(0, height // 2):
    s = '.|.' * (i * 2 + 1)
    print(s.center(length,'-'))
print('WELCOME'.center(length, '-'))
for i in range(height // 2 - 1, -1, -1):
    s = '.|.' * (i * 2 + 1)
    print(s.center(length,'-'))
    
    
    
10. String Formatting

def print_formatted(number):
    width = len("{0:b}".format(number))
    for i in range(1, number + 1):
        for base in 'doXb':
            print("{0:{width}{base}}".format(i, base=base, width=width), end=' ')
        print()

if __name__ == '__main__':
    n = int(input())
    print_formatted(n)
    
    
    
    
11. Alphabet Rangoli

def print_rangoli(size):
    myStr = 'abcdefghijklmnopqrstuvwxyz'[0:size]
    
    for i in range(size-1, -size, -1):
        x = abs(i)
        if x >= 0:
            line = myStr[size:x:-1]+myStr[x:size]
            print ("--"*x+ '-'.join(line)+"--"*x)


if __name__ == '__main__':
    n = int(input())
    print_rangoli(n)
    
    
    
12. Capitalize!

def solve(s):
    return ' '.join(word.capitalize() for word in s.split(' '))
    


if __name__ == '__main__':
    fptr = open(os.environ['OUTPUT_PATH'], 'w')

    s = input()

    result = solve(s)

    fptr.write(result + '\n')

    fptr.close()
    
    
    
    
    
13. The Minion Game


def minion_game(string):
    # your code goes here
    sl = len(string)
    p1, p2 = 0,0

    for i in range(sl):
        if string[i] in 'AEIOU':
            p1 = p1 + sl - i
        else:
            p2 = p2 + sl - i
    if p1>p2:
        print('Kevin', p1)
    elif p1<p2:
        print('Stuart', p2)
    else:
        print('Draw')

#For the word "BANANA", the first vowel 'A' occurs at position 1, len("BANANA") = 6, 
#so there are 6-1 = 5 substrings starting with this letter 'A': ['A', 'AN', 'ANA', 'ANAN', 'ANANA'], 
#you add one extra letter to that specific letter 'A' until you get to the end of the word.
    

if __name__ == '__main__':
    s = input()
    minion_game(s)
    
    
    
14. Merge the Tools!

def merge_the_tools(string, k):
    # your code goes here
    while string:
        s = string[0:k]
        seen = ''
        for c in s:
            if c not in seen:
                seen += c
        print(seen)
        string = string[k:]

if __name__ == '__main__':
    string, k = input(), int(input())
    merge_the_tools(string, k)
    
    
# Classes

1. Classes: Dealing with Complex Numbers

import math

class Complex(object):
    def __init__(self, real, imaginary):
        self.real=real
        self.imaginary=imaginary
    def __add__(self, no):
        a=self.real+no.real
        b=self.imaginary+no.imaginary
        if a<0 and b<0:
            return ("-%.2f-%.2fi"%(abs(a),abs(b)))
        elif a>=0 and b<0:
            return ("%.2f-%.2fi"%(abs(a),abs(b)))
        elif a<0and b>=0:
            return ("-%.2f+%.2fi"%(abs(a),abs(b)))
        elif a>=0and b>=0:
            return ("%.2f+%.2fi"%(abs(a),abs(b)))
    def __sub__(self, no):
        a=self.real-no.real
        b=self.imaginary-no.imaginary
        if a<0 and b<0:
            return ("-%.2f-%.2fi"%(abs(a),abs(b)))
        elif a>=0 and b<0:
            return ("%.2f-%.2fi"%(abs(a),abs(b)))
        elif a<0and b>=0:
            return ("-%.2f+%.2fi"%(abs(a),abs(b)))
        elif a>=0and b>=0:
            return ("%.2f+%.2fi"%(abs(a),abs(b)))
    
    def __mul__(self, no):
        a=self.real*no.real-self.imaginary*no.imaginary
        b=no.imaginary*self.real+self.imaginary*no.real
        if a<0 and b<0:
            return ("-%.2f-%.2fi"%(abs(a),abs(b)))
        elif a>=0 and b<0:
            return ("%.2f-%.2fi"%(abs(a),abs(b)))
        elif a<0and b>=0:
            return ("-%.2f+%.2fi"%(abs(a),abs(b)))
        elif a>=0and b>=0:
            return ("%.2f+%.2fi"%(abs(a),abs(b)))
    def __truediv__(self, no):
        x=no.real**2+no.imaginary**2
        a=(self.real*no.real+self.imaginary*no.imaginary)/x
        b=(-no.imaginary*self.real+self.imaginary*no.real)/x
        if a<0 and b<0:
            return ("-%.2f-%.2fi"%(abs(a),abs(b)))
        elif a>=0 and b<0:
            return ("%.2f-%.2fi"%(abs(a),abs(b)))
        elif a<0and b>=0:
            return ("-%.2f+%.2fi"%(abs(a),abs(b)))
        elif a>=0and b>=0:
            return ("%.2f+%.2fi"%(abs(a),abs(b)))
        
    def mod(self):
        a=math.pow(self.real**2+self.imaginary**2, 0.5)
        b=0
        if a<0 and b<0:
            return ("-%.2f-%.2fi"%(abs(a),abs(b)))
        elif a>=0 and b<0:
            return ("%.2f-%.2fi"%(abs(a),abs(b)))
        elif a<0and b>=0:
            return ("-%.2f+%.2fi"%(abs(a),abs(b)))
        elif a>=0and b>=0:
            return ("%.2f+%.2fi"%(abs(a),abs(b)))

if __name__ == '__main__':
    c = map(float, input().split())
    d = map(float, input().split())
    x = Complex(*c)
    y = Complex(*d)
    print(*map(str, [x+y, x-y, x*y, x/y, x.mod(), y.mod()]), sep='\n')
    
    
    
    
2 Class 2 - Find the Torsional Angle

import math

class Points(object):
    def __init__(self, x, y, z):
        self.x=x
        self.y=y
        self.z=z

    def __sub__(self, no):
        return  Points((self.x-no.x),(self.y-no.y),(self.z-no.z))

    def dot(self, no):
        return (self.x*no.x)+(self.y*no.y)+(self.z*no.z)

    def cross(self, no):
        return Points((self.y*no.z-self.z*no.y),(self.z*no.x-self.x*no.z),(self.x*no.y-self.y*no.x))
        
    def absolute(self):
        return math.pow((self.x ** 2 + self.y ** 2 + self.z ** 2), 0.5)

if __name__ == '__main__':
    points = list()
    for i in range(4):
        a = list(map(float, input().split()))
        points.append(a)

    a, b, c, d = Points(*points[0]), Points(*points[1]), Points(*points[2]), Points(*points[3])
    x = (b - a).cross(c - b)
    y = (c - b).cross(d - c)
    angle = math.acos(x.dot(y) / (x.absolute() * y.absolute()))

    print("%.2f" % math.degrees(angle))
    
    
    
    
# Built-Ins


1. Zipped! (zip： This function returns a list of tuples)

n, x = map(int, input().split()) 

sheet = []
for _ in range(x):
    sheet.append( map(float, input().split()) ) 

for i in zip(*sheet): 
    print( sum(i)/x )
    
    
2. Input()

x,k=map(int, input().split())
print (k==eval(input()))



3. Python Evaluation

eval(input())


4. Athlete Sort


import math
import os
import random
import re
import sys



if __name__ == '__main__':
    nm = input().split()

    n = int(nm[0])

    m = int(nm[1])

    arr = []

    for _ in range(n):
        arr.append(list(map(int, input().rstrip().split())))

    k = int(input())


arr.sort(key=lambda x: x[k])

for line in arr:
    print(*line, sep=' ', end='\n')


    

5. Any or All

N, l = int(input()), input().split(' ')
print(all([int(i)>0 for i in l]) and any([j == j[::-1] for j in l]))


6. ginortS

print(*(sorted(input(), key=lambda x: (x.isdigit(), x.isdigit() and int(x)%2==0, x.isupper(), x.islower()))), sep='')

# Sorting1234
# key=lambda x: (x.isdigit())
# Sorting1234 -> FFFFFFFTTTT (Sorting1234)
# key=lambda x: (x.isdigit(), x.isdigit() and int(x)%2==0)
# Sorting1234 -> FFFFFFF(FFTT) (Sorting1324)
# key=lambda x: (x.isdigit(), x.isdigit() and int(x)%2==0, x.isupper())
# Sorting1324 -> (FFFFFFT)FFTT (ortingS1324)
# key=lambda x: (x.isdigit(), x.isdigit() and int(x)%2==0, x.isupper(), x.islower())
# ortingS1324 -> (FFFFFF)TFFTT (ortingS1324)
# key=lambda x: (x.isdigit(), x.isdigit() and int(x)%2==0, x.isupper(), x.islower(),x) 
# here x is used to perform defalut order rule
# ortingS1324 -> ginortS1324






# Numpy

1. Shape and Reshape

import numpy

def arrays(arr):
    # complete this function
    # use numpy.array
    return numpy.array(arr[::-1],float)

arr = input().strip().split(' ')
result = arrays(arr)
print(result)


2. Shape and Reshape



import numpy

arr = input().strip().split(' ')
arr2 = numpy.array(arr,int)
print(numpy.reshape(arr2,(3,3)))



3. Transpose and Flatten


import numpy

N, M = map(int, input().split(' '))
arr = [input().strip().split(' ') for _ in range(N)]
arr2 = numpy.array(arr, int)
print(arr2.transpose())
print(arr2.flatten())


4. Concatenate

import numpy

N, M, P = map(int, input().split(' '))
arr = [input().strip().split(' ') for _ in range(N)]
arr2 = [input().strip().split(' ') for _ in range(M)]
n_arr = numpy.array(arr, int)
n_arr2 = numpy.array(arr2, int)
result = numpy.concatenate((n_arr, n_arr2), axis = 0)
print(result)



5. Zeros and Ones

import numpy

x, y, z = map(int, input().split(' '))
print(numpy.zeros((x,y,z), dtype = numpy.int))
print(numpy.ones((x,y,z), dtype = numpy.int))


6.Zeros and Ones


import numpy

nums = tuple(map(int, input().split()))
print (numpy.zeros(nums, dtype = numpy.int))
print (numpy.ones(nums, dtype = numpy.int))

   
   
7. Eye and Identity

   
import numpy
print(str(numpy.eye(*map(int,input().split()))).replace('1',' 1').replace('0',' 0'))



8. Array Mathematics

import numpy as np
n, m = map(int, input().split())
a, b = (np.array([input().split() for _ in range(n)], dtype=int) for _ in range(2))
#print(a+b, a-b, a*b, a//b, a%b, a**b, sep='\n')
print(np.add(a,b), np.subtract(a,b), np.multiply(a,b), np.floor_divide(a,b), np.mod(a,b), np.power(a,b), sep='\n')


9. Floor, Ceil and Rint

import numpy as np

np.set_printoptions(sign=' ')

arr = input().strip().split(' ')
n_arr = np.array(arr, float)
print(np.floor(n_arr))
print(np.ceil(n_arr))
print(np.rint(n_arr))


10. Sum and Prod

import numpy
N, M = map(int, input().split())
A = numpy.array([input().split() for _ in range(N)],int)
print(numpy.prod(numpy.sum(A, axis=0), axis=0))



11. Min and Max
import numpy as np

print(np.max(np.min(np.array([input().split() for _ in range(int(input().split()[0]))],int),axis=1)))

12. Mean, Var, and Std

import numpy

N, M = map(int, input().split(' '))

my_array = numpy.array([ input().split(' ') for i in range(N) ], int)

numpy.set_printoptions(legacy='1.13')
print(numpy.mean(my_array, axis = 1)) 
print(numpy.var(my_array, axis = 0))  
print(numpy.std(my_array, axis = None)) 


13. Dot and Cross

import numpy
n=int(input())
a = numpy.array([input().split() for _ in range(n)],int)
b = numpy.array([input().split() for _ in range(n)],int)
m = numpy.dot(a,b)
print (m)



14. Inner and Outer

import numpy as np
A = np.array(input().split(), int)
B = np.array(input().split(), int)
print(np.inner(A,B), np.outer(A,B), sep='\n')


15. Polynomials

import numpy

print(numpy.polyval(list(map(float,input().split())),float(input())))


16. Linear Algebra

import numpy
print(round(numpy.linalg.det(numpy.array([list(map(float,input().split())) for _ in range(int(input()))])),2))


# Sets

1. Introduction to Sets

def average(array):
    # your code goes here
    s_array = set(array)
    l_s_array = list(s_array)
    return sum(l_s_array)/len(l_s_array)


if __name__ == '__main__':
    n = int(input())
    arr = list(map(int, input().split()))
    result = average(arr)
    print(result)
    
    
2 Symmetric Difference

M = int(input())
arr1 = map(int,input().split(' '))
N = int(input())
arr2 = map(int,input().split(' '))

s_arr1 = set(arr1)
s_arr2 = set(arr2)

l_arr1 = s_arr1.difference(s_arr2)
l_arr2 = s_arr2.difference(s_arr1)


arr_t = list(l_arr1.union(l_arr2))
arr_t.sort()

for i in range(len(arr_t)):
    print(arr_t[i])
    
    
3 No Idea!

_ = input()
array = input().split()
like = set(input().split())
dislike = set(input().split())
print(sum((i in like) - (i in dislike) for i in array))



4. Set .add()

n = int(input())
s = set()
for i in range(n):
    string = input()
    s.add(string)
print(len(s))


5. Set .discard(), .remove() & .pop()

n = int(input())
s = set(map(int, input().split()))
d = {"pop":s.pop, "remove":s.remove, "discard": s.discard}
for _ in range(int(input())):
    c = input().split()
    d[c[0]](int(c[1])) if len(c)>1 else d[c[0]]()
print(sum(s))

or 

n = int(input())
s = set(map(int, input().split())) 
for i in range(int(input())):
    eval('s.{0}({1})'.format(*input().split()+['']))

print(sum(s))


6. Set .union() Operation

_, a = input(), set(input().split())
_, b = input(), set(input().split())
print(len(a.union(b)))



7. Set .intersection() Operation

num1, st1, num2, st2 = (set(input().split()) for i in range(4))
print len(st1.intersection(st2))


8. Set .difference() Operation

n1 = int(input())
set_1 = set(map(int,input().split()))
n2 = int(input())
set_2 = set(map(int,input().split()))
print(len(set_1.difference(set_2)))


9. Set .symmetric_difference() Operation

n1 = int(input())
set_1 = set(map(int,input().split()))
n2 = int(input())
set_2 = set(map(int,input().split()))
print(len(set_1.symmetric_difference(set_2)))


10. Set Mutations

_ = int(input())
s1 = set(map(int, input().split()))
N = int(input())

for _ in range(N):
    cmd, _ = input().split()
    s2 = set(map(int, input().split()))
    if(cmd == "intersection_update"):
        s1.intersection_update(s2)
    elif(cmd == "update"):
        s1.update(s2)
    elif(cmd == "symmetric_difference_update"):
        s1.symmetric_difference_update(s2)
    elif(cmd == "difference_update"):
        s1.difference_update(s2)

print(sum(s1))

    
    
11. The Captain's Room

if __name__ == "__main__":
    K = input()
    rooms = input().split(' ')
    
    rooms.sort()
    a = set([rooms[i] for i in range(0,len(rooms),2)])
    b = set([rooms[i] for i in range(1,len(rooms),2)])
    
    print(list(a.symmetric_difference(b))[0])
    
    
    
12. Check Subset

for _ in range(int(input())):
    x, a, z, b = input(), set(input().split()), input(), set(input().split())
    print(a.issubset(b))
    
    
13. Check Strict Superset

a = set(input().split())
print(all(a > set(input().split()) for _ in range(int(input()))))

# set operations
#len(s)   number of elements in set s (cardinality)
#x in s   test x for membership in s
#x not in s   test x for non-membership in s
#s.issubset(t)   s <= t    test whether every element in s is in t
#s.issuperset(t)   s >= t   test whether every element in t is in s
#s.union(t)   s | t   new set with elements from both s and t
#s.intersection(t)   s & t   new set with elements common to s and t
#s.difference(t)   s - t   new set with elements in s but not in t
#s.symmetric_difference(t)   s ^ t   new set with elements in either s or t but not both




# Math

1. Polar Coordinates

import cmath
rj = complex(input())
#print(*cmath.polar(complex(input())), sep='\n')
print((abs(rj)),(cmath.phase(rj)), sep='\n')


2. Find Angle MBC

import math 
AB = int(input()) 
BC = int(input()) 
print(str(int(round(math.degrees(math.atan2(AB,BC)))))+'°')


3. Triangle Quest 2

for i in range(1,int(input())+1): #More than 2 lines will result in 0 score. Do not leave a blank line also
    print((10**i//9)**2)
    
    
4. Mod Divmod

a, b = int(input()), int(input())
print("{d[0]}\n{d[1]}\n{d}".format(d=divmod(a, b)))


5. Power - Mod Power

a,b,m = (int(input()) for _ in '123')
print(pow(a,b),pow(a,b,m),sep='\n')

6. Integers Come In All Sizes

a,b,c,d = (int(input()) for _ in range(4))
print (pow(a,b)+pow(c,d))


7. Triangle Quest

for i in range(1,int(input())): #More than 2 lines will result in 0 score. Do not leave a blank line also
    print(i*(10**i//9))
    
    
# Collections


1. collections.Counter()

    
import collections

numShoes = int(input())
shoes = collections.Counter(map(int, input().split()))
numCust = int(input())

income = 0

for i in range(numCust):
    size, price = map(int, input().split())
    if shoes[size]: 
        income += price
        shoes[size] -= 1

print(income)
    
    
2. DefaultDict Tutorial

from collections import defaultdict
d = defaultdict(list)
list2 = []

n, m = map(int, input().split())
for i in range(n):
    d[input()].append(i+1)
for i in range(m):
    list2 += [input()]
for i in list2:
    if i in d:
        print(' '.join(map(str,d[i])))
    else:
        print(-1)
        
        
 3. Collections.namedtuple()

from collections import namedtuple
N = int(input())
fields = input().split()
total = 0
for i in range(N):
    f1, f2, f3, f4 = input().split()
    field = namedtuple('field', fields)
    total += int(field(f1, f2, f3, f4).MARKS)
print('{:.2f}'.format(total/N))


4. Collections.OrderedDict()

from collections import OrderedDict

N = int(input())
items = OrderedDict()
for i in range(N):
    *item_name,price = input().split()
    try:
        items[' '.join(item_name)] += int(price)
    except KeyError:
        items[' '.join(item_name)] = int(price)

for it in items:
    print(it,items[it])
    
5. Word Order

from collections import Counter, OrderedDict
class OrderedCounter(Counter, OrderedDict):
    pass
d = OrderedCounter(input() for _ in range(int(input())))
print(len(d))
print(*d.values())

6. Collections.deque()

from collections import deque

d = deque()

for _ in range(int(input())):
    #method, *n = input().split()
    #getattr(d, method)(*n)
    eval('d.{0}({1})'.format(*input().split()+['']))

print(*d)

7. Piling Up!

from collections import deque

for _ in range(int(input())):  
    _, queue =input(), deque(map(int, input().split()))
    
    for cube in reversed(sorted(queue)):
        if queue[-1] == cube: queue.pop()
        elif queue[0] == cube: queue.popleft()
        else:
            print('No')
            break
    else: print('Yes')
    
    
8. Company Logo

from collections import Counter, OrderedDict

class OrderedCounter(Counter, OrderedDict):
    pass
[print(*c) for c in OrderedCounter(sorted(input())).most_common(3)]



# Errors and Exceptions

1. Exceptions

for i in range(int(input())):
    try:
        a,b = map(int, input().split())
        print(a//b)
    except Exception as e: #Errors detected during execution are called exceptions.
        print('Error Code:',e)
        
        
 2. Incorrect Regex

import re
for _ in range(int(input())):
    ans = True
    try:
        reg = re.compile(input())
    except re.error:
        ans = False
    print(ans)
    
    
# Itertools

1. itertools.product()

from itertools import product

a = list(map(int, input().split()))
b = list(map(int, input().split()))

print(*product(a, b))


2. itertools.permutations()

import itertools

A, k = input().split()
l = sorted(list(itertools.permutations(A,int(k))))
for i in l:
    print(*[''.join(i)])
#print(*[''.join(i) for i in itertools.permutations(sorted(A),int(k))],sep='\n')


3. itertools.combinations()

from itertools import combinations

s , n  = input().split()

for i in range(1, int(n)+1):
    for j in combinations(sorted(s), i):
        print(''.join(j))
        
4. itertools.combinations_with_replacement()

from itertools import combinations_with_replacement

s, k = input().split()

for c in combinations_with_replacement(sorted(s), int(k)):
    print("".join(c))
    
    
5. Compress the String!

from itertools import groupby
print(*[(len(list(c)), int(k)) for k, c in groupby(input())])


6. Iterables and Iterators

from itertools import combinations

N = int(input())
L = input().split()
K = int(input())

C = list(combinations(L, K))
F = filter(lambda c: 'a' in c, C)
print("{0:.3}".format(len(list(F))/len(C)))


7. Maximize It!

from itertools import product

K,M = map(int,input().split())
N = (list(map(int, input().split()))[1:] for _ in range(K))
results = map(lambda x: sum(i**2 for i in x)%M, product(*N)) #map(function, iterable)
print(max(results))

# Date and Time

1. Calendar Module

import calendar
n1,n2,n3=map(int,input().split())
print((calendar.day_name[calendar.weekday(n3,n1,n2)]).upper())


2. Time Delta

from datetime import datetime
for _ in range(int(input())):
    t1=datetime.strptime(input(),'%a %d %b %Y %H:%M:%S %z')
    t2=datetime.strptime(input(),'%a %d %b %Y %H:%M:%S %z')
    print (int(abs((t1-t2).total_seconds())))
    
    
# Python Functionals

1. Map and Lambda Function

cube = lambda x: pow(x,3) # complete the lambda function 

def fibonacci(n):
    # return a list of fibonacci numbers
    lis = [0,1]
    for i in range(2,n):
        lis.append(lis[i-2] + lis[i-1])
    return(lis[0:n])
         

if __name__ == '__main__':
    n = int(input())
    print(list(map(cube, fibonacci(n))))
    
    
    
2 Validating Email Addresses With a Filter


def fun(s):
    # return True if s is a valid email, else return False
    try:
        username, url = s.split("@")
        website, extension = url.split(".")
    except ValueError:
        return False
    
    if not username.replace("-", "").replace("_", "").isalnum():
        return False
    if not website.isalnum():
        return False
    if len(extension) > 3:
        return False
    return True

def filter_mail(emails):
    return list(filter(fun, emails))

if __name__ == '__main__':
    n = int(input())
    emails = []
    for _ in range(n):
        emails.append(input())

filtered_emails = filter_mail(emails)
filtered_emails.sort()
print(filtered_emails)



3. Reduce Function

from fractions import Fraction
from functools import reduce
import operator


def product(fracs):
    t = reduce(operator.mul , fracs)# complete this line with a reduce statement
    return t.numerator, t.denominator

if __name__ == '__main__':
    fracs = []
    for _ in range(int(input())):
        fracs.append(Fraction(*map(int, input().split())))
    result = product(fracs)
    print(*result)

# Regex and Parsing

1. Detect Floating Point Number

count=int(input().strip())
for _ in range(count):
    ans=False
    try:
        string=input().strip()
        number=float(string)
        ans=True
        number=int(string)
        ans=False
    except:
        pass
    print(ans)

2. Re.split()

regex_pattern = r"[.,]+"	# Do not delete 'r'.
import re
print("\n".join(re.split(regex_pattern, input())))

3. Group(), Groups() & Groupdict()

import re
m = re.search(r'([a-zA-Z0-9])\1+', input().strip())
print(m.group(1) if m else -1)






